@model TripNPick.Models.UserSelections
@{
    ViewBag.Title = "TestIndex";
}

<head>
    <link rel="stylesheet" type="text/css" href="~/Content/select2.min.css" />
    <script type="text/javascript" src="~/Scripts/select2.js"></script>
    <link rel="stylesheet" type="text/css" href="~/Content/maps.css" />
    <link href="~/Content/SideContent.css" type="text/css" rel="stylesheet" />
    <script type="text/javascript">
        $(document).ready(function () {
            var months = @Html.Raw(Json.Encode(Model.cMonths));
            var interests = @Html.Raw(Json.Encode(Model.cInterests));

            var optionsM = document.getElementById('monthDD'), month, i;
            var optionsI = document.getElementById('interetsDD'), interest, i;

            for(i = 0; i < optionsM.length; i++) {
                month = optionsM[i];
                if (months.includes(month.value)){
                    month.selected = 'selected';
                }
            }
            for(i = 0; i < optionsI.length; i++) {
                interest = optionsI[i];
                if (interests.includes(interest.value)){
                    interest.selected = 'selected';
                }
            }
        });
    </script>
    <script type="text/javascript" src="~/Scripts/mapDropdown.js"></script>
    <script type="text/javascript" src="~/Scripts/mapIntsDD.js"></script>
</head>

<script type="text/javascript">
    function goToFarmPage(farmId) {
        url = "/Map/createTable/?farmInfo=" + farmId;
        window.open(url);
    }

    function initMap() {

        var map = new google.maps.Map(document.getElementById('testMap'), {
            zoom: 3.9,
            center: { lat: -25.031596581410874, lng: 134.36777208750004 }
        });
        
        var markersVIC = [];
        var markersNSW = [];
        var markersSA = [];
        var markersWA = [];
        var markersTAS = [];
        var markersQLD = [];
        var markersNT = [];

        var interests = [];
        var hostels = [];
       
        var clusterUrl = 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m';
        var farmUrl = '/img/markers/Farm.png';
        var hostelUrl = '/img/markers/Hostel.png';
        var interestUrl = '/img/markers/';

        var interestMap = new Map();
        interestMap.set(1, 'Museum.png');
        interestMap.set(2, 'Sights.png');
        interestMap.set(3, 'Parks.png');
        interestMap.set(4, 'Sights.png');
        interestMap.set(5, 'Beach.png');
        interestMap.set(6, 'Outdoors.png');
        interestMap.set(7, 'Wildlife.png');
        interestMap.set(8, 'Hiking.png');
        interestMap.set(9, 'Sports.png');
        interestMap.set(10, 'Zoo.png');

        // "~/img/markers/museum.png"

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":VIC"})", function (information, status) {
            data = information.farmsAndInterests;
            hostelData = information.hostels;
            var hostelFilter = [];
            for (i = 0; i < information.hostels.length; i++) {
                if (!hostelFilter.includes(information.hostels[i].hostelId)) {
                    hostelFilter.push(information.hostels[i].hostelId);
                    var hostelContent = '<p>' + information.hostels[i].hostelName + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(information.hostels[i].hostel_lat, information.hostels[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        hostelName: information.hostels[i].hostelName,
                        hostelAddress: information.hostels[i].hostelAddress,
                        hostelRating: information.hostels[i].hostelRating,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            var filter = [];
            
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersVIC.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersVICCluster = new MarkerClusterer(map, markersVIC,
                { imagePath: clusterUrl });
        })

   

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":SA"})", function (information, status) {
            data = information.farmsAndInterests;
            hostelData = information.hostels;
            var hostelFilter = [];
            for (i = 0; i < hostelData.length; i++) {
                if (!hostelFilter.includes(hostelData[i].hostelId)) {
                    hostelFilter.push(hostelData[i].hostelId);
                    var hostelContent = '<p>' + hostelData[i].hostelName + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(hostelData[i].hostel_lat, hostelData[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            var filter = [];
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersSA.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersSACluster = new MarkerClusterer(map, markersSA,
                { imagePath: clusterUrl });
        })

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":NSW"})", function (information, status) {
            data = information.farmsAndInterests;
            var hostelFilter = [];
            for (i = 0; i < information.hostels.length; i++) {
                if (!hostelFilter.includes(information.hostels[i].hostelId)) {
                    hostelFilter.push(information.hostels[i].hostelId);
                    var hostelContent = '<p>' + information.hostels[i].hostelName + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(information.hostels[i].hostel_lat, information.hostels[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            var filter = [];
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersNSW.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersNSWCluster = new MarkerClusterer(map, markersNSW,
                { imagePath: clusterUrl });
        })

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":WA"})", function (information, status) {
            var filter = [];
            hostelData = information.hostels;
            var hostelFilter = [];
            for (i = 0; i < hostelData.length; i++) {
                if (!hostelFilter.includes(hostelData[i].hostelId)) {
                    hostelFilter.push(hostelData[i].hostelId);
                    var hostelContent = '<p>' + hostelData[i].hostelId + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(hostelData[i].hostel_lat, hostelData[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            data = information.farmsAndInterests;
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersWA.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersWACluster = new MarkerClusterer(map, markersWA,
                { imagePath: clusterUrl });
        })

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":TAS"})", function (information, status) {
            data = information.farmsAndInterests;
            hostelData = information.hostels;
            var hostelFilter = [];
            for (i = 0; i < hostelData.length; i++) {
                if (!hostelFilter.includes(hostelData[i].hostelId)) {
                    hostelFilter.push(hostelData[i].hostelId);
                    var hostelContent = '<p>' + hostelData[i].hostelId + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(hostelData[i].hostel_lat, hostelData[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            var filter = [];
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersTAS.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersTASCluster = new MarkerClusterer(map, markersTAS,
                { imagePath: clusterUrl });
        })

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":QLD"})", function (information, status) {
            data = information.farmsAndInterests;
            hostelData = information.hostels;
            var hostelFilter = [];
            for (i = 0; i < hostelData.length; i++) {
                if (!hostelFilter.includes(hostelData[i].hostelId)) {
                    hostelFilter.push(hostelData[i].hostelId);
                    var hostelContent = '<p>' + hostelData[i].hostelId + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(hostelData[i].hostel_lat, hostelData[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            var filter = [];
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersQLD.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersQLDCluster = new MarkerClusterer(map, markersQLD,
                { imagePath: clusterUrl });
        })

        $.get("@Url.Action("doTheDew", "Map", new { userInput = Model.combinedString + ":NT"})", function (information, status) {
            
            data = information.farmsAndInterests;
            var hostelFilter = [];
            for (i = 0; i < information.hostels.length; i++) {
                if (!hostelFilter.includes(information.hostels[i].hostelId))  {
                    hostelFilter.push(information.hostels[i].hostelId);
                    var hostelContent = '<p>' + information.hostels[i].hostelName  + '</p>';
                    var hostelWindow = new google.maps.InfoWindow({
                        content: hostelContent
                    });
                    hMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(information.hostels[i].hostel_lat, information.hostels[i].hostel_lng),
                        visible: false,
                        icon: hostelUrl,
                        infowindow: hostelWindow,
                        map: map
                    });
                    hostels.push(hMarker);
                    (function (hMarker) {
                        google.maps.event.addListener(hMarker, 'mouseover', function () {
                            hMarker.infowindow.open(map, hMarker);
                        });
                        google.maps.event.addListener(hMarker, 'mouseout', function () {
                            hMarker.infowindow.close(map, hMarker);
                        });
                    })(hMarker);
                }
            }
            var filter = [];
            for (i = 0; i < data.length; i++) {
                var farmContent = '<p>' + data[i].farm.farmName + '</p>';
                var farmWindow = new google.maps.InfoWindow({
                    content: farmContent
                });
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].farm.farm_lat, data[i].farm.farm_lng),
                    icon: farmUrl,
                    interestsString: data[i].farm.farmId,
                    infowindow: farmWindow,
                    map: map
                });
                
                var ints = data[i].interests;
                for (x = 0; x < ints.length; x++) {
                    if (!filter.includes(ints[x].attractionId)) {
                        filter.push(ints[x].attractionId);
                        var interestContent = '<p>' + ints[x].attractionName + '</p>';
                        var interestWindow = new google.maps.InfoWindow({
                            content: interestContent
                        });
                        iMarker = new google.maps.Marker({
                            position: new google.maps.LatLng(ints[x].interestLat, ints[x].interestLng),
                            visible: false,
                            icon: interestUrl + interestMap.get(ints[x].interestId),
                            infowindow: interestWindow,
                            map: map
                        });
                        interests.push(iMarker);
                        (function (iMarker) {
                            google.maps.event.addListener(iMarker, 'mouseover', function () {
                                iMarker.infowindow.open(map, iMarker);
                            });
                            google.maps.event.addListener(iMarker, 'mouseout', function () {
                                iMarker.infowindow.close(map, iMarker);
                            });
                        })(iMarker);
                    }
                    var intString = ":" + ints[x].attractionId + "," + ints[x].distance;
                    marker.interestsString = marker.interestsString + intString;
                }
                markersNT.push(marker);
                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        goToFarmPage(marker.interestsString);
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        marker.infowindow.open(map, marker);
                    });
                    google.maps.event.addListener(marker, 'mouseout', function () {
                        marker.infowindow.close(map, marker);
                    });
                })(marker);
            }
            var markersNTCluster = new MarkerClusterer(map, markersNT,
                { imagePath: clusterUrl });
        })

        google.maps.event.addListener(map, 'zoom_changed', function() {
            var zoom = map.getZoom();
            for (i = 0; i < interests.length; i++) {
                interests[i].setVisible(zoom >= 10);
            }
            for (i = 0; i < hostels.length; i++) {
                hostels[i].setVisible(zoom >= 10);
            }
        });
    }
</script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAdNjpD2meHBBiquEK62khiotrQ_4u5WpQ&callback=initMap"></script>

<body>
    <div style="padding-top: 50px; background-color: lightgray">
        <div class="container">
            @Html.MvcSiteMap().SiteMapPath()
        </div>
    </div>
    <div>
        <div id="mapForm">
            <form action="/Map/TestIndex">
                <h2>Select Interests, Search Farms</h2>
                <label for="interetsDD">Preferred Interests:</label>
                <select id="interetsDD" multiple="multiple" name="cInterests">
                    <option value="Museums">Museums</option>
                    <option value="Sights and Landmarks">Sights</option>
                    <option value="Nature and Parks">Parks</option>
                    <option value="Beaches">Beaches</option>
                    <option value="Outdoor Activities and Tours">Outdoors</option>
                    <option value="Nature and Wildlife Areas">Wildlife</option>
                    <option value="Hiking Trails">Hiking</option>
                    <option value="Fun and Games and Sports">Games/Sports</option>
                    <option value="Zoos and Aquariums">Zoos/Aquariums</option>
                </select>
                <div>
                    <div class="col-lg-6 leftDD">
                        <label for="monthDD">Months to Go: </label>
                        <select id="monthDD" multiple="multiple" name="cMonths">
                            <option value="January">January</option>
                            <option value="February">February</option>
                            <option value="March">March</option>
                            <option value="April">April</option>
                            <option value="May">May</option>
                            <option value="June">June</option>
                            <option value="July">July</option>
                            <option value="August">August</option>
                            <option value="September">September</option>
                            <option value="October">October</option>
                            <option value="Novenmber">Novenmber</option>
                            <option value="December">December</option>
                        </select>
                    </div>
                    <div class="col-lg-6 rightDD">
                        <label for="distanceDD">Distance from Farm to Interests: </label>
                        <select id="distanceDD" multiple="multiple" name="cDistance">
                            <option value="80">80 km</option>
                            <option value="120">120 km</option>
                            <option value="160">160 km</option>
                            <option value="200">200 km</option>
                        </select>
                    </div>
                </div>
                <input type="submit" class="btn btn-success" value="Search" />
            </form>
        </div>

        <div>
            <div class="col-lg-4 intro">
                <img src="~/img/zoom.png" />
                <p>Clusters show the number of farms in that area. <br />Zoom in to check individual farms. </p>
            </div>
            <div class="col-lg-4 intro">
                <img src="~/img/check.png" />
                <p>Mouse over farms, attractions and hostels to check more info. <br />They are marked by different color of icons. </p>
            </div>
            <div class="col-lg-4 intro">
                <img src="~/img/click.png" />
                <p>Click on farm markers to get more details about the farm.</p>
            </div>
        </div>

        <div style="margin-top: 16px">
            @*<div class="col-lg-3">
        </div>*@

            <div id="testMap" class="col-lg-12" style="height: 550px; padding:0!important; margin:0!important">
            </div>
            <div id="mySidenav" class="sidenav">
                <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
                <div>
                   <h1></h1>
                </div>
            </div>
            <div id="example">
                <label><span><img src="~/img/markers/Farm.png" /></span>Farm  </label>
                <label><span><img src="~/img/markers/Hostel.png" /></span>Hostel  </label>
                @if (Model.cInterests != null)
                 {
                    for (int i = 0; i < Model.cInterests.Length; i++)
                    {
                        switch (Model.cInterests[i])
                        {
                            case "Museums":
                                <label><span><img src="~/img/markers/Museum.png" /></span>Museums  </label>
                                break;
                            case "Sights and Landmarks":
                                <label><span><img src="~/img/markers/Sights.png" /></span>Sights  </label>
                                break;
                            case "Nature and Parks":
                              <label><span><img src="~/img/markers/Parks.png" /></span>Parks  </label>
                                break;
                            case "Beaches":
                                <label><span><img src="~/img/markers/Beach.png" /></span>Beaches  </label>
                                break;
                            case "Outdoor Activities and Tours":
                                <label><span><img src="~/img/markers/Outdoors.png" /></span>Outdoors  </label>
                                break;
                            case "Nature and Wildlife Areas":
                                <label><span><img src="~/img/markers/Wildlife.png" /></span>Wildlife  </label>
                                break;
                            case "Hiking Trails":
                                <label><span><img src="~/img/markers/Hiking.png" /></span>Hiking  </label>
                                break;
                            case "Fun and Games and Sports":
                                <label><span><img src="~/img/markers/Sports.png" /></span>Games/Sports  </label>
                                break;
                            case "Zoos and Aquariums":
                                    <label><span><img src="~/img/markers/Zoo.png" /></span>Zoos/Aquariums  </label>
                                    break;
                            default:
                                    break;
                          }
                     }
                 }
            </div>
        </div>
    </div>
</body>
