@model TripNPick.Models.UserSelections
@{
    ViewBag.Title = "Search";
}

<head>
    <link rel="stylesheet" type="text/css" href="~/Content/maps.css" />
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"
        integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.16/datatables.min.css" />
    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.16/datatables.min.js"></script>
</head>

<script type="text/javascript">
    function initMap() {
        var map;
        var bounds = new google.maps.LatLngBounds();

        var coa = { lat: -25.031596581410874, lng: 134.36777208750004 };
        var mapOptions = {
            center: coa,
            zoom: 3.9,
            mapTypeId: google.maps.MapTypeId.TERRAIN,
            mapTypeControl: false,
            labels: true,
            gestureHandling: 'none',
            zoomControl: false
        };
        var infoWindow = new google.maps.InfoWindow();
        var map = new google.maps.Map(document.getElementById("mapCanvas"), mapOptions);
        map.setTilt(50);
        $.get("@Url.Action("getFarmCountMonthlyFiltered", "Map", new { combinedString = Model.combinedString })", function (data, status) {
            var markers = [];
            var contentString = [];
              var infowindow = [];
            for (i = 0; i < data.length; i++) {
                var markerLabel = String(data[i].numberOfFarms);
                var infoWindowContent = '<h3>' + data[i].stateName + '</h3>' +
                        '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                        '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                $('#theTable').dataTable().fnAddData([data[i].stateName, data[i].numberOfFarms, data[i].numberOfInterests]);


                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].location_lat, data[i].location_lng),
                    icon: 'https://png.icons8.com/office/32/000000/farm.png',
                    label: markerLabel,
                    markerType: "State",
                    title : String(data[i].stateName),
                    map: map
                });
                (function (marker, infoWindowContent) {
                    google.maps.event.addListener(marker, 'mouseover', function (e) {
                        infoWindow.setContent(infoWindowContent);
                        infoWindow.open(map, marker);
                    });
                })(marker, infoWindowContent);

                google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                    return function () {
                        infowindow.close();
                    };
                })(marker, infoWindowContent, infowindow));

                (function (marker) {
                    google.maps.event.addListener(marker, 'click', function () {
                        map.panTo(this.getPosition());
                        map.setZoom(6);
                        var markerType = marker.markerType;
                        var markerTitle = marker.title;
                        $('#theTable').dataTable().fnClearTable();
                        switch (markerTitle) {
                            case "SA":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":SA"})", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                            case "NT":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":NT" })", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                            case "VIC":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":VIC"})", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                            case "NSW":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":NSW"})", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                            case "WA":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":WA"})", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                            case "TAS":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":TAS"})", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                            case "QLD":
                                $.get("@Url.Action("getSuburbWiseData", "Map", new { userInput = Model.combinedString + ":QLD"})", function (data, status) {
                                    for (i = 0; i < data.length; i++) {
                                        var markerLabel = String(data[i].numberOfFarms);
                                        var infoWindowContent = '<h3>' + data[i].suburbName + '</h3>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Farms: <b>' + String(data[i].numberOfFarms) + '</b></h4>' +
                                            '<br/>' + '<h4 style="color: #4682B4">Number of Interests: ' + String(data[i].numberOfInterests) + '<h4>';
                                        $('#theTable').dataTable().fnAddData([data[i].suburbName, data[i].numberOfFarms, data[i].numberOfInterests]);

                                        marker = new google.maps.Marker({
                                            position: new google.maps.LatLng(data[i].suburbLat, data[i].suburbLng),
                                            label: markerLabel,
                                            markerType: "Suburb",
                                            title: String(data[i].stateName),
                                            map: map
                                        });
                                        (function (marker, infoWindowContent) {
                                            google.maps.event.addListener(marker, 'mouseover', function (e) {
                                                infoWindow.setContent(infoWindowContent);
                                                infoWindow.open(map, marker);
                                            });
                                        })(marker, infoWindowContent);

                                        google.maps.event.addListener(marker, 'mouseout', (function (marker, infoWindowContent, infowindow) {
                                            return function () {
                                                infowindow.close();
                                            };
                                        })(marker, infoWindowContent, infowindow));

                                    }
                                })
                                break;
                        }
                    })
                })(marker);
            }
        })
    }

    $(document).ready(function () {
        $('#theTable').DataTable({
            "info": false,
            "searching": false,
            "lengthChange": false,
            "displayLength": 10,
            "order": [[1, "desc"]],
            "columnDefs": [{
                "orderable": false, "targets": 0
            }]
        });
    });
</script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCC_HGUZ-hvy730lBns4WKZxkhzMzm0UJU&region=AU&language=en-AU&callback=initMap" async defer></script>

<body>
    <div class="container bgBorder">
        <form action="/Map/Index" method="post">
            <table style="width: 100%">
                <tr>
                    <th>
                        <label class="tagContent">
                            Time to visit:
                        </label>
                    </th>
                    <td style="padding-bottom: 8px;">
                        <label class="content">
                            Jan
                            @if (Model.cMonths != null && Model.cMonths.Contains("January"))
                            {
                                <input type="checkbox" name="cMonths" value="January" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="January">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Feb
                            @if (Model.cMonths != null && Model.cMonths.Contains("February"))
                            {
                                <input type="checkbox" name="cMonths" value="February" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="February">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Mar
                            @if (Model.cMonths != null && Model.cMonths.Contains("March"))
                            {
                                <input type="checkbox" name="cMonths" value="March" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="March">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Apr
                            @if (Model.cMonths != null && Model.cMonths.Contains("April"))
                            {
                                <input type="checkbox" name="cMonths" value="April" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="April">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            May
                            @if (Model.cMonths != null && Model.cMonths.Contains("May"))
                            {
                                <input type="checkbox" name="cMonths" value="May" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="May">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Jun
                            @if (Model.cMonths != null && Model.cMonths.Contains("June"))
                            {
                                <input type="checkbox" name="cMonths" value="June" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="June">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Jul
                            @if (Model.cMonths != null && Model.cMonths.Contains("July"))
                            {
                                <input type="checkbox" name="cMonths" value="July" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="July">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Aug
                            @if (Model.cMonths != null && Model.cMonths.Contains("August"))
                            {
                                <input type="checkbox" name="cMonths" value="August" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="August">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Sep
                            @if (Model.cMonths != null && Model.cMonths.Contains("September"))
                            {
                                <input type="checkbox" name="cMonths" value="September" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="September">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Oct
                            @if (Model.cMonths != null && Model.cMonths.Contains("October"))
                            {
                                <input type="checkbox" name="cMonths" value="October" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="October">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Nov
                            @if (Model.cMonths != null && Model.cMonths.Contains("Novenmber"))
                            {
                                <input type="checkbox" name="cMonths" value="Novenmber" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="Novenmber">
                            }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Dec
                            @if (Model.cMonths != null && Model.cMonths.Contains("December"))
                            {
                                <input type="checkbox" name="cMonths" value="December" checked>
                            }
                            else
                            {
                                <input type="checkbox" name="cMonths" value="December">
                            }
                            <span class="checkmark"></span>
                        </label>
                    </td>
                </tr>
                <tr style="border-bottom: 3px solid #e7e7e7">
                    <th style="padding-bottom: 8px;">
                        <label class="tagContent">
                            Prefered interests:
                        </label>
                    </th>
                    <td style="padding-bottom: 8px;">
                        <label class="content">
                            Museums
                            @if (Model.cInterests != null && Model.cInterests.Contains("Museums"))
        {
                    <input type="checkbox" name="cInterests" value="Museums" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Museums">
}
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Sights & Landmarks
                            @if (Model.cInterests != null && Model.cInterests.Contains("Sights & Landmarks"))
        {
                    <input type="checkbox" name="cInterests" value="Sights & Landmarks" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Sights & Landmarks">
}
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Nature and Parks
                            @if (Model.cInterests != null && Model.cInterests.Contains("Nature and Parks"))
        {
                    <input type="checkbox" name="cInterests" value="Nature and Parks" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Nature and Parks">
}
                            <span class="checkmark"></span>
                        </label>

                        <label class="content">
                            Beaches
                            @if (Model.cInterests != null && Model.cInterests.Contains("Beaches"))
                             {
                                <input type="checkbox" name="cInterests" value="Beaches" checked>
                             }
                            else
                             {
                            <input type="checkbox" name="cInterests" value="Beaches">
                             }
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Outdoor Activities and Tours
                            @if (Model.cInterests != null && Model.cInterests.Contains("Outdoor Activities and Tours"))
                         {
                    <input type="checkbox" name="cInterests" value="Outdoor Activities and Tours" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Outdoor Activities and Tours">
}
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Nature & Wildlife Areas
                            @if (Model.cInterests != null && Model.cInterests.Contains("Nature & Wildlife Areas"))
        {
                    <input type="checkbox" name="cInterests" value="Nature & Wildlife Areas" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Nature & Wildlife Areas">
}
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Hiking Trails
                            @if (Model.cInterests != null && Model.cInterests.Contains("Hiking Trails"))
        {
                    <input type="checkbox" name="cInterests" value="Hiking Trails" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Hiking Trails">
}
                            <span class="checkmark"></span>
                        </label>
                        <label class="content">
                            Fun & Games & Sports
                            @if (Model.cInterests != null && Model.cInterests.Contains("Fun & Games & Sports"))
        {
                    <input type="checkbox" name="cInterests" value="Fun & Games & Sports" checked>
}
else
{
                    <input type="checkbox" name="cInterests" value="Fun & Games & Sports">
}
                            <span class="checkmark"></span>
                        </label>

                        <label class="content">
                            Zoos & Aquariums
                            @if (Model.cInterests != null && Model.cInterests.Contains("Zoos & Aquariums"))
                             {
                                <input type="checkbox" name="cInterests" value="Zoos & Aquariums" checked>
                             }
                             else
                             {
                                 <input type="checkbox" name="cInterests" value="Zoos & Aquariums">
                             }
                            <span class="checkmark"></span>
                            </label>


                        <input type="submit" class="submitbtn" value="Search" style="float: right; margin-right: 64px;" />
                    </td>
                </tr>
            </table>
        </form>

        <div class="col-lg-4" style="background-color: #B0E0E6; margin-top: 16px; height: 500px">
            <table id="theTable" style="width: 100%; padding: 50px 0;">
                <thead>
                    <tr>
                        <th>State Name</th>
                        <th>Number of Farms</th>
                        <th>Number of Interests</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <div id ="mapCanvas" class="col-lg-8" style="margin-top: 16px; height: 500px">
        </div>
    </div>
</body>

